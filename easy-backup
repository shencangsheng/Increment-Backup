#!/bin/bash
# creator by shencangsheng
set -e

OUT="$(uname -s)"
case "${OUT}" in
Linux*) machine=Linux ;;
Darwin*) machine=Mac ;;
CYGWIN*) machine=Cygwin ;;
MINGW*) machine=MinGw ;;
*) machine="UNKNOWN:${OUT}" ;;
esac

GLOAB_ARGS=("$@")

Error() {
    echo -e "\033[31m[Error] $1 \033[0m" >&2
}

Usage() {
    echo -e "\033[33m[Usage] $1 \033[0m" >&2
}

Info() {
    echo -e "[Info] $1" >&2
}

Todo() {
    echo -e "\033[36m[Todo] $1 \033[0m" >&2
}

Notice() {
    echo -e "\033[33m[Important] $1 \033[0m" >&2
}

function prompt_confirmation() {
    local message=$1
    local response

    read -r -p "$message [Y/n] " response

    case $response in
    [yY][eE][sS] | [yY])
        return 0
        ;;
    [nN][oO] | [nN])
        return 1
        ;;
    *)
        Error "Unknown option $response"
        exit 1
        ;;
    esac
}

function get_args_value() {
    local key="--$1"
    local def_value=$2
    local value=$def_value
    for arg in "${GLOAB_ARGS[@]}"; do
        case $arg in
        $key*)
            value="${arg#*=}"
            break
            ;;
        esac
    done
    if [ -z "$value" ]; then
        Error "「${key}」Variable is empty"
        kill -9 $$
    fi
    if [ "$def_value" == "--Blank" ]; then
        value=''
    fi
    echo $value
}

function check_directory() {
    if [ ! -d "$1" ]; then
        Error "「$1」 No such directory / Must be a directory"
        exit 1
    fi
}

function check_file() {
    if [ ! -f "$1" ]; then
        Error "「$1」 No such file / Must be a file"
        exit 1
    fi
}

current_date=$(date "+%Y-%m-%d")

function backup() {
    local target_dir=$(get_args_value 'target-dir')
    check_directory $target_dir

    local output_path=$(get_args_value 'output-path')
    check_directory $output_path
    output_path=${output_path%/}

    local exclude_files=$(get_args_value 'exclude-files' '--Blank')
    exclude_files=(${exclude_files//,/ })

    local dir_name="$(dirname "$target_dir")"
    local file_name="$(basename "$target_dir")"

    target_dir="${dir_name}/${file_name}"

    local action=$(get_args_value "action")

    local _exclude_files=
    if [[ ${#exclude_files[@]} > =0 ]]; then
        for exclude_file in ${exclude_files[@]}; do
            _exclude_files=${_exclude_file}"--exclude ${target_dir}/${exclude_file} "
        done
    fi

    local TAR="tar --listed-incremental=${output_path}/${file_name}-snapshot -zcf"

    case $action in
    full)
        echo "${TAR} ${output_path}/${file_name}-full.tar.gz -C ${dir_name} ${file_name} ${_exclude_files}"
        ;;

    inc)
        echo "${TAR} ${output_path}/${file_name}-inc-${current_date}.tar.gz -C ${dir_name} ${file_name} ${_exclude_files}"
        ;;
    *)
        Error "Unknown option $action"
        exit 1
        ;;
    esac
}

function restore() {
    local target_file=$(get_args_value 'target-file')
    check_file $target_file
    if [[ "$target_file" != *.tar.gz ]]; then
        Error "${target_file} Not a compressed file"
    fi
    local dir_name="$(dirname "$target_dir")"
    local file_name="$(basename "$target_dir")"
    local stripped_name="${file_name%%.tar.gz}"

    local output_path=$(get_args_value 'output-path')
    check_directory $output_path
    output_path=${output_path%/}

    local snapshot_file=$(get_args_value 'snapshot-file' "${dir_name}/${stripped_name}-snapshot")
    check_file $snapshot_file

    local extraction_file="${output_path}/${stripped_name}"

    mkdir -p $extraction_file

    echo "tar --listed-incremental=${snapshot_file} -zxf ${target_file} -C $extraction_file"

    local inc_dir=$(get_args_value 'inc-dir' "${dir_name}")

    local start_date=$(get_args_value 'start-date')
    local end_date=$(get_args_value 'end-date')

    local FIND="find ${inc_dir}"

    if [ ! -z "$start_date" ]; then
        FIND="${FIND} -newerct '${start_date}'"
    fi

    if [ ! -z "$end_date" ]; then
        FIND="${FIND} ! -newerct '${end_date}'"
    fi

    local inc_files=($(${FIND} -name "${stripped_name}-inc-*.sql" | awk -F '/' '{ print $2 }' | sort -n))

    if [ -z "$inc_files" ]; then
        Info "No incremental files scanned"
        return 0
    fi

    for item in ${inc_files[@]}; do
        echo "tar --listed-incremental=${snapshot_file} -zxf ${inc_dir}/${item}"
    done
}
